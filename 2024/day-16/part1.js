const input = [
    "#############################################################################################################################################",
    "#.........#.......................#.#.........#.....#.....................#.............#...#...#.........#.........#.............#........E#",
    "#.###.###.#.#.#################.#.#.#.#####.###.#.#.#####.#######.#######.#.#.#####.#.#.#.#.###.#.###.###.#.###.#.###.#######.#####.###.#####",
    "#.#...#.....#.#.....#...#...........#.....#.#...#.#.#...#.#.....#.#...........................#.#.#.....#...#...#.#...#.....#...#...#.#.....#",
    "#.#####.#.###.###.#.#.###.#####.#.#.#.###.#.#.###.#.#.#.#.#.###.#.#####.#####.###.#.#.#####.#.#.#.#.#.#.#.###.#.#.#.###.###.###.#.###.#####.#",
    "#.#...#...#...#...#...#.....#...#.#.....#.#...#...#.#.#.#.#.....#.....#.....#.#...#.#.......#.#.#.#.#.............#.#.....#...#...#.....#...#",
    "#.#.#.###.#.###.#######.#####.#.#.#.#.###.#####.###.#.#.#.#.#.###.###.#####.#.#.###.#.#.###.#.#.#.#.#.###.###.#.#.#.#.###.###.#######.###.#.#",
    "#...#.....#.#...#.......#.#...#.#.#.#.........#...#...#.#...#.........................#.#.....#.#...#.#.#.....#...#...#.....#.#.....#.#...#.#",
    "#.#######.#.#.#.#.#######.#.###.###.#.#####.#####.#####.#########.#.###.#######.#####.#.#.#.###.#####.#.#.###.#.#######.###.#.#.###.#.#.#####",
    "#.#...#.....#.#.#...#...#.#...#.#.....#...#.#...#.#.....#.........#.#...#.....#.........................#.....#...#...#.....#.#...#...#.....#",
    "#.###.#.#.#####.###.#.#.#.###.#.#.#.#.#.#.###.#.#.#.#####.#######.#.#.###.#.#####.#.#.###.#.#.#####.#.###.#####.#.#.#.#.###.#.#.#.###.#####.#",
    "#.............#.......#...#.............#.....#...#.#.....#.......#.................#...#.....#.....#...#.#.....#...#.#.#.#...#.#.#.#.....#.#",
    "#####.#.#.#.#.###########.#.#######.###############.#.#####.#######.#.#.#####.#.###.###.#.#.###.#####.#.#.#.#########.#.#.#######.#.#.#####.#",
    "#.#...#.#.#.#.......#.....#...#.....#.............#.#.....#...#.....#...#...#...#...#...#.#.#.....#...#...#...#...#...#.#.........#...#.....#",
    "#.#.###.#.#.#######.#######.#.#.#####.#########.#.#.#####.###.#.#.###.###.#.#####.###.#####.#.#####.#.###.###.###.#.#.#.###.#.#####.###.###.#",
    "#.#.#.#.#.........#...........#.#.....#...#.....#.#.......#.#.#...#.#.#.#.#.#.....#.......#.#...#...#.........#...#.#.......#.#...#.#.#.#.#.#",
    "#.#.#.#.#.#####.#.#############.#.#######.#.#####.#########.#.#.###.#.#.#.#.#.#.#########.#.###.#.###.#########.###.#######.#.#.#.#.#.#.#.#.#",
    "#...........#...#...#.........#.#...#.....#.#.....#.#.......#...#...#.#...#...#...............#.#.....#.......#...#.......#...#...#...#.#...#",
    "#.#.#.#######.#####.#.#######.#.###.#.#.###.###.#.#.#.#####.#####.###.#.###########.###########.###########.#.###.#####.#########.###.#.###.#",
    "#...#...#.#...#.....#.......#.#...#.#.#...#...#...#.#...#.#.#.....#...#.....#.....#.#...........#.#.........#.........#...........#...#...#.#",
    "#.###.#.#.#.###.#.#####.#.#.#.###.#.#.#.#.###.#.###.###.#.#.#.###.#.#######.#.#.#.#.#.###########.#.#.#####################.#####.#.#####.###",
    "#.....#...#...#.........#.#.#.....#.#...#...#.#.....#...#.#.#.#.#...#.....#...#.#.#.........#.......#.#...............#.....#...#.#.#...#...#",
    "#####.###.###.###.#######.#.#######.#####.###.#######.###.#.#.#.#####.#########.#.#########.#.#######.#.#############.#.###.#.###.#.#.#.###.#",
    "#...#.....#...#...#...#...#...#...........#...#.....#...#.#.#.#.......#...........#.......#...#...#...#.#.....#.......#.#...#.....#.#.#...#.#",
    "#.#.#.#####.###.#.###.#.#.###.#############.###.###.###.#.#.#.#.#####.#.###########.#####.#.#####.#.#.#.###.###.#######.#.#.#####.#.#####.#.#",
    "#.#.#.#...#...#.#...#.#.#...#...#...#.....#...#...#...#.#.#...#...#...#...#.........#...#.#.#.....#.#.#...#.........#...#.#.........#.....#.#",
    "#.###.#.#.###.#.###.#.#.###.###.#.#.#.###.###.###.#.#.#.#.#######.#.#####.#.#########.###.#.###.###.#####.#########.#.#.#.#######.###.###.#.#",
    "#...#.#.#...#...#...#...#.#...#...#...#.#.......#.#.#.#.#...#.....#.#.....#...#...#.......#.....#...#.....#...........#.#.#.....#.....#...#.#",
    "#.#.#.###.#.#####.###.###.###.#####.###.###.#####.#.#.#.###.#.#.#####.#######.###.#.###########.#.###.#####.###.###.#####.#.#.#.#.#########.#",
    "#.#.......#.#.......#.#.....#.....#.........#.....#.#.#...#...#.......#.......#...#.....#.......#.#...#.....#.....#.#...#.#.#.#...#...#.....#",
    "#.###.#######.#.###.#.#.#######.#.#.#.#.#####.#####.#####.#.#########.###.#####.#######.#######.#.#.###.#####.#.#.###.#.#.###.###.#.#.#.###.#",
    "#.#...........#.....#...#.....#.#.#.#.#.#.....#...#.......#...#.....#...#.....#.......#.......#.#.#.#.................#.#.....#...#.#...#.#.#",
    "#.#.#.###################.###.###.#.###.#.#####.#.###########.#.###.#.#.#####.#.#.###.#######.#.#.#.#.#####.#.#.#######.#####.#.#.#.#####.#.#",
    "#.#.#.............#.......#.......#...#.#.......#.#.......#...#.#...#.........#.#...#.#...#...#.#.#...#...#...#.......#.....#.#.#.#...#...#.#",
    "#.#.#.###.#####.###.#.###############.#.#####.###.#####.#.#.###.#.#####.#.#####.#.#.#.#.#.#.#####.#####.#.#########.#####.###.#.#.###.#.###.#",
    "#.#.....#.#...#.....#.....#...#.......#.......#...#...#.#.#...#...#...#...#.....#...#...#.#.......#.#...#.#.......#.#.....#...#.#.....#.....#",
    "#.###.#.#.#.#.#.#########.#.#.#.#.#.#####.#####.###.#.#.#.###.#.#.#.#.###########.#########.#####.#.#.###.#.###.#.#.#.###.#.###.#####.#####.#",
    "#.#.#...#.#.#.#...#.....#...#.#.#.#.#.....#...#.#...#.#.#.....#.#...#.....#.....#.....#.....#...#...#...#.#.....#...#.#...#.#.#.#.....#...#.#",
    "#.#.#.#####.#.###.#.###.#####.#.#.###.#####.#.#.###.#.#########.#########.#.###.#.###.#.#####.#.#.#####.#.#######.#.#.###.#.#.#.#####.#.#.#.#",
    "#.#.#.....#.#...#...#.....#...#.#.......#...#.#.....#.............#.......#.#...#...#.......#.#.#.#.....#.......#...#...#.....#.........#.#.#",
    "#.#.#####.#.###.#.#######.#.#######.#####.###.###################.#.#######.#.#####.#######.#.#.###.#####.#####.###.###.#####.#######.###.#.#",
    "#...#.....#.#...#.#.....#.........#...#.....#...#.................#.#.......#.....#.#.....#.#.#...#.#.....#...#...#.#...#.....#...#.#.....#.#",
    "###.#.#####.#.###.#.###.#.#######.#####.#######.#.#######.#.###.#.#.###.#########.###.###.###.###.#.#####.#.#.###.#.#.###.#####.#.#.#.#####.#",
    "#...#...#...#...#.#...#.#...#...#.........#...#.#.......#.#.#.....#.....#.#.....#.....#.#...#...#.#.#...#.#.#.#.#.#.#.....#.....#...#...#...#",
    "#.#####.#.#####.#####.#.#####.#.#.#########.#.#.#####.###.###.###.#######.#.#.#.#######.###.###.#.#.#.#.#.#.#.#.#.#.#####.#####.###.#.#.#.#.#",
    "#...#.#...#...#.#.....#.......#.#.....#.....#...#.....#...#...#.#.........#.#...........#...#...#.#...#.#.#.#.#...#.#...#.......#.#.#.#.#...#",
    "###.#.#######.#.#.#############.#.#####.#######.#.#####.###.###.#######.###.#.#######.###.###.###.#.#.#.###.#.###.###.#.#########.#.#.#.#####",
    "#.#...............#.....#.....#.#.#.....#.#.....#...#.#.....#...#.....#.#...#.....#...#...#...#.#.#.....#...#...#.#...#.....#.........#.....#",
    "#.#.#.#####.#.#######.#.###.###.###.#####.#.#######.#.#######.###.###.#.#.#######.#####.###.###.#.###.#.#.#####.#.#.#######.#.#.###.#.#####.#",
    "#.#...#.#...#.#.....#.#...#.#...#...#.#...#.#.....#.#.........#...#.#.#.........#...#...#...#.#...#...#.#.....#.#...#.....#.#.#...#.......#.#",
    "#.#####.#.#.#.#.#.#.#.###.#.#.###.#.#.#.#.#.#.###.#.#######.###.###.#.#.###########.#.###.#.#.#.###.###.#####.#.###.#.#.#.#.#####.###.###.#.#",
    "#.......#.#...#.#.#...#.....#...#...#.#.#...#.#...#.....#...#...#...#.#...#.........#.#.#.#.#.#.....#.....#...#.#.......#.#.#...#.........#.#",
    "#.#####.#.#.#.#.#.#####.#######.###.#.#.#####.#.#######.#.#.#.#####.#.#####.#######.#.#.#.#.#.#.###.#######.#.#.#.#####.###.#.#.#.###.#####.#",
    "#.#...#.#.#.#...#.....#.#.......#...#.....#...#...#...#...#.#.#...#...#.....#.....#.#.#...#.#.#...#.......#.#...#.#...#.......#.#.#.........#",
    "#.#.#.#.#.#.#####.###.#.#.#######.###.#####.#####.#.#.#.###.#.#.#.###.#.#.###.#####.#.#####.#.###.#.#####.#.#.###.###.#########.###.#.###.#.#",
    "#.#.#.....#.#...#...#.#.#.......#.#.....#.......#...#.....#.....#...#...#.#...#.....#.#...#.#.#...#...#.#...#.#.......#.......#.....#.....#.#",
    "#.#.###.#.#.#.#.###.#.#.#######.#.###.###.###############.#.#######.#####.#.#.#.#####.#.#.#.#.#.#####.#.#####.###.#####.#####.###.#####.###.#",
    "#.#.#.#.#.#.#.#.....#.#.#...#...#...#.#.....#.............#.......#.#.......#.......#...#...#.#...#.#.#.....#.....#.....#...#...#.#...#.....#",
    "###.#.#.#.#.#.#######.#.#.#.#.###.#.###.#####.#################.#.#.#.#############.#########.###.#.#.#.###.###.#.#.#######.###.###.#.#####.#",
    "#...#.#.#.#.#.......#.#...#.#.#...#...#.#...#.......#.........#...#.#...#.......#.............#.........#...#...#.#.#...#...#.#.#...#.#.....#",
    "#.###.#.#.#.#######.#.###.###.#.#####.#.#.#.#.#####.#.###.###.#.###.#####.#####.###########.###.###########.#.#####.#.#.#.#.#.#.#.###.#.#####",
    "#.#.....#.#.......#.#.....#...#...#.#...#.#.#.....#.....#.#...#.#.#.......#...#.....#.....#.#...#...........#.......#.#...#...#...#...#.#...#",
    "#.###.###.#.#####.#.###.###.#####.#.#.###.#.#####.#######.#.###.#.###.#.###.#.#.###.#.###.###.###.#######.#.#######.#.###.###.#####.###.###.#",
    "#.......#.......#.#...#.#...#...#.......#.#.....#.#...#...#...#.....#...#...#.#...#.....#.#...#...#.......#.#.....#.....#.#...#...#...#.....#",
    "#.#.#######.###.#.###.#.#.#.#.#.#######.#.#####.#.#.#.#.#.#########.#####.###.#.#####.###.#.#.#.#.#.#########.###.#####.#.#.#.#.#.###.#####.#",
    "#.#.........#...#.#.#.#.#.#...#.......#.#.#...#.#.#.#.#...#.........#.....#...#.#...#.#...#.#...#.#.........#...#.#...#...#.#...#.....#...#.#",
    "#.#########.#.###.#.#.###.#########.#.#.#.###.#.#.###.###.#.#########.#####.###.#.#.###.#.#.#####.#########.###.#.###.#.###.#######.#####.#.#",
    "#.......#.......#...#...#...........#...#.....#.#.....#...#.#...#.....#.........#.#...#.#.#...#...........#.....#...#...#...#.....#.#...#...#",
    "#######.#.#.###.###.#.#.#####.#.#.#.#########.#.#####.#.###.#.#.###.#########.###.###.#.#.###.#.#######.###########.###.#.###.###.###.#.#####",
    "#...#.#.#.#.#...#.#...#.....#...#.#.....#...#.#.....#.#.......#...#...#...#...#.........#...#.#.......#.........#.#...#.#.....#...#...#.....#",
    "#.#.#.#.#.#.#.###.###.###.#.#####.#.#.#.#.#.#.#####.#.###.#######.###.#.#.#.###.#######.#.###.###.###.#.#####.#.#.###.#.#######.#.#.#######.#",
    "#.#...#...#...#.#.....#...#.#.....#.#.#.#.#.#.#...#.#.#...#.....#.....#.#.#...#.......#.#...#...#.#...#.#...#.#.....#.#.....#...#.#.........#",
    "#.#######.#####.#.#####.#.#.#.#######.#.#.#.#.#.###.#.#.#.#.###.###.#####.###.#######.###.#.###.#.#.###.#.###.#######.#.#####.#####.#.#.###.#",
    "#...............#.....#...#.#.....#...#.#.#...#.#...#.#.#...#...#.#.#.....#.........#.....#...#.#...#.#.#...#.........#.#.....#...#.#.#.#...#",
    "#.#.#.#.#####.#######.###.#.#.###.#.###.#.#####.#.###.#.#####.###.#.#.#####.#######.#.#####.#.#.#.#.#.#.#.#.###########.#.#####.#.#.#.#.#.###",
    "#...#.#.....#.......#...#.#.#...#.#...#...#.....#.#...#.#...#.#...#.#.......#.....#.#...#...#.#.#.#.#...#.#.......#.....#...#...#...#.#...#.#",
    "#.###.#####.#.#####.###.#.#.###.#.#.#.#####.#####.#.#.#.###.#.###.#.###########.#.#.###.#.###.#.###.#.###.###.###.#####.###.#.#######.#####.#",
    "#...#.....#.#...#...#...#.#.....#.#.#.......#.....#.#.#...#.#.....#.#...#.....#.#.#...#.#...#.#.....#.#.#.#.#...#.#...#.#...#.#.....#.#...#.#",
    "#######.###.#####.###.###.###.#.#.#.#.#####.#.#.###.#.###.#.#####.#.#.#.#.###.#.#.###.#.###.#.#######.#.#.#.###.#.#.#.###.#.#.#.###.#.#.#.#.#",
    "#.......#...#...#.#...#.#.....#.#.#...#.....#.....#.....#.#.......#.#.#...#.....#.#...#...#.#.#...#...#...#...#.#...#...#.#.#.....#.#.#.#.#.#",
    "#.#.#.###.###.#.#.#.###.#####.###.#.#############.#######.#.#####.#.#.#############.#######.#.#.#.#.###.###.###.#######.#.#.#######.#.#.#.#.#",
    "#.#...#...#...#...#.#...#...#.#...#.#.............#.......#.#...#...#.#...#...#...#.#.....#.#...#.#...#.....#...#.......#.#...#.....#...#.#.#",
    "#.#####.#####.###.#.#.#.#.###.#.###.#.#############.#########.#.###.#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#######.#.#####.###.#.###.###.#####.#.#",
    "#.#.....#.....#...#...#...#...#.....#.#.......................#.#...#...#...#...#.#...#.#...#...#...#.........#.#...#.....#.....#.#.....#...#",
    "#.#.#####.###.###########.#.#.#####.#.###########.#############.#.###.###########.#.###.#.#####.#.#.#####.#######.#.#####.#.#####.#.#.#####.#",
    "#...#.....#...#...........#.....#...#.....#.....#.#.....#.....#.#...#...........#.#.#...#.#...#...#...#...#.....#.#.....#.#.........#.......#",
    "#.#####.#.#####.###.#.###.#.###.#.#######.#.###.#.###.#.#.###.#.###.#############.#.#.#####.#.#########.###.###.#.#####.#######.#.#.#########",
    "#.....#.#...#...#.#.......#...#.#.........#...#.#.#...#.#...#.....................#.#.#.....#...........#...#.#.#.#...#...#...#.#...#.......#",
    "#####.#####.#.###.#####.#####.#.#.#.#####.###.#.#.#.#.#####.###.#.#.###############.#.#.#############.###.###.#.#.#.#.###.#.#.#.###.#.###.###",
    "#.....#...#.......#...#.#...#.#...#.#.#.....#.#.#...#.#...#.#...#.#...............#...#.......#.....#...#.#...#.....#...#...#...#.#.#...#...#",
    "#.#####.#.#######.#.#.###.#.#.#####.#.#.#####.#.#######.#.#.#####.#.#############.#.#.###.#####.###.#####.#.#######.###.#########.#.#######.#",
    "#.......#.#.....#.#.#.#...#.#.....#.#.....#...#...#...#.#.#.#.......#.#.......#...#.#.....#.....#.#.......#.#.......#.#...#.......#...#.....#",
    "#########.#.###.###.#.#.###.#####.#.#######.#####.#.#.#.#.#.#.#####.#.#.#####.#.###.###.###.#####.#########.#.#####.#.###.#######.###.#.###.#",
    "#.............#.#...#...#.........#.........#...#...#.#.#...#.#...#.#...#...#.#.....#.......#...............#...#.#.#...#.........#...#...#.#",
    "#.#####.#####.#.#.#######.#######.###########.#.#####.#.###.#.#.###.#####.#.#.#######.#######.#.###########.###.#.#.#.#########.###.#####.#.#",
    "#...#...#.....#.........#.#...#.........#.#...#.#.....#.....#.#...#.......#.....#.....#.......#.....#...#...#.#...#.#.........#.#...#.....#.#",
    "#####.#.#.#.#.#####.###.#.#.#.#####.#.#.#.#.###.#.#####.#.###.###.#############.#.#.###.###.#.#####.#.#.###.#.#.###.#.#####.#.#.#.#####.###.#",
    "#.....#.#.#.#.#...#...#.#.#.#.#...#...#...#.#.....#.....#.........#.......#...#...#...#...#.#.....#...#...#.#.#.#...#.#.....#...#.#...#...#.#",
    "#.#####.###.#.#.#.#####.#.#.#.#.#.#######.#.#####################.#.#####.###.#.#####.#.#.#.#####.#######.#.#.#.#.###.#.#.#.#.###.#.#.###.###",
    "#.#...#.....#...#.......#.#.#...#.....#.#.#.....................#...#...#.#...#.#...#.#.#.#.....#...#...#.#...#.#...#...#.#.#...#...#...#...#",
    "#.#.#.#.###############.#.#.#########.#.#.###############.###.#.#######.#.#.###.#.#.#.###.#####.#####.#.#.#.###.###.#.###.#.#.#########.#.#.#",
    "#.#.#.#.........#.#...#.#.#...#.....#.#.#...#.........#...#.....#.......#.#...#.#.#...#...#...#...#...#...#.#...#.#.#.#...#.#.........#.#.#.#",
    "#.#.#.#.#.###.#.#.#.#.#.#.###.#.#.###.#.###.#.#.#####.#.#.#.#####.#######.###.#.#.#####.#####.###.#.#######.#.#.#.#.###.###.#.#######.#.###.#",
    "#.#.#.#.....#.....#.#...#.#...#.#.....#.........#...#.#.#.#.#.#.....#.........#...#...#.....#.......#.....#.#.#...#.....#.#...#.....#.#.#...#",
    "#.#.#.#.###.#.#####.#####.#.#######.###.#######.#.#.#.#.###.#.#.###.#.#############.###.###.#####.###.###.#.#.#.#.#######.#########.#.#.#.###",
    "#...#...........#.....#...#...#...#...#.......#...#.#...#...#...#.#.....#...............#.#.....#.#.....#.#.#.#.#...#.......#.......#...#...#",
    "#####.#.#.###.#.#.#####.#####.#.#.###.#.#####.#.###.#####.###.###.#######.#########.#####.#####.###.#####.#.#.#.###.#.###.#.###.###.#######.#",
    "#.....#.......#...#...#.#...#...#.#...#.#.#...#...#...#...#.#.....#...#...#.....#.......#.....#...#.#.#...#.#.#.#...#.#.#.#...#...#.......#.#",
    "#.#.#########.#####.#.#.#.#.#####.###.#.#.#.#.###.###.#.###.#####.#.###.#####.###.###.#.#.#######.#.#.#.#.###.#.#####.#.#.###.###.#######.#.#",
    "#.#.#.....#.......#.#.#...#.....#...#...#.#.......#.#...#...#...#.#...#.#...#...#.#...#.#.......#.#...#.#.#...#...#.....#...#...#.....#...#.#",
    "#.###.###.###.#####.#.#########.###.#####.#########.#####.###.#.#.###.#.#.#.###.#.#.###.#####.###.###.#.###.###.#.#.#.#####.###.#####.#.###.#",
    "#.....#...#.........#.#.......#.#...#.......#.....#...#.......#...#...#...#...#...#...#.#...#.#.......#.#...#...#...#.....#...............#.#",
    "#.#####.###.#.#.#####.#.#.#####.#.###.###.###.###.#.#.#.###########.#########.#######.#.#.#.#.#.#####.#.#.###########.###.###.#.#.#######.#.#",
    "#.#...#.....#...#...#.#.#.......#...#...#.#.....#...#...#.........#.....#...#.......#.#...#...#...#...#.....#.......#.#.#.#.................#",
    "#.###.#######.###.#.#.#.###########.###.#.#.#####.#######.#######.#.#.###.#.#######.#.#########.#.#.###.###.#.#####.#.#.#.#.#######.###.###.#",
    "#...#...........#.#.#...#...#...#.#.....#...#...#...#...#.......#...#.....#.......#.#...........#.#.#.#...#.#...#...#.#...#.....#...#.#.#...#",
    "###.#.#######.#.#.#######.#.#.#.#.###.#######.#.###.#.#.#.#########.###.###.###.###.#.#####.#.#.#.#.#.#.###.#.#.#.###.#.###.###.#.###.#.#.###",
    "#...#...#.....#.#.........#...#.....#...#.....#.#.....#.#.#...........#...#...#.#...#.#...#.#.#.#.....#...#.#.#.#.#...#...#.....#.#.........#",
    "#.#####.#.###.#.#.###.#########.#######.#.#####.#######.###.#########.###.###.#.#.#.###.#.###.#########.#.#.###.#.###.###.#.#####.#.###.#.#.#",
    "#.#.............#.#...#.........#.....#...#...#...#...#.....#...........#...#.#.#.....#.#.#...#...#...#.#.#...#.#.#...#...#.....#.#.#...#...#",
    "#.#.#.###.###.#.###.#############.#.#.#####.#.###.#.###.#####.#.#.#####.###.#.#######.#.#.#.#.#.#.#.#.###.###.#.#.#.###.#.###.#.#.#.#.#####.#",
    "#.#.#.....#...#...#...............#.#...#...#...#.#.....#...#.#...#...#...#.#.......#...#.#.#.#.#...#.#.....#...#.#...#.#...#.......#.#...#.#",
    "#.#.#####.#.#####.###########.#####.#####.#.###.#.#######.#.#.###.#.#.###.#####.###.#####.#.###.#####.#.#.#######.###.#.#.#.###.###.#.#.#.#.#",
    "#.#.#...#...#...............#.....#...#...#.#...#.#.......#...#.#...#.#.......#...#...#...#.#...#.......#.#.....#...#.#...#...#.#...#...#...#",
    "#.#.#.#.###.###############.#########.#.###.#.#.#.#.###########.#####.#######.#######.#.###.#.#############.###.###.#.#.#.###.#.###.#########",
    "#.#...#...#.#.....#.#.....#.#.......#.....#.#...#...#...................#...#...#.....#...#.#...........#...#...#.#...#.#.....#...#...#.....#",
    "#.###.###.###.###.#.#.#.#.#.#.#####.#####.#.###.#.###.#.#####.#######.#.#.###.#.#.#######.#.###########.#.###.#.#.#####.#######.#.###.#.#####",
    "#...#...#.#.....#.#.#.#.#.#.#...#.#.#...#.....#.......#...#.#.#.....#.#.#.#.....#.#.....#...#.........................#...#...#.#.#.....#...#",
    "###.#####.#.#####.#.#.#.#.#.###.#.#.#.#.#.###.###.#######.#.#.#.###.###.#.#.#.###.#.###.###.#.###.###.#.#.#.#####.#######.#.#.#.#.#.#####.#.#",
    "#.#.....#.......................#.#...#.#.#.....#...........#.#.#.#.....#...#...#.#.#.#...#.#.....#.#.#...#.........#.....#.#...#.#...#...#.#",
    "#.#####.#####.#.#.#.###.#.#######.#####.#.#.#########.#######.#.#.#######.###.#.#.#.#.#.###.#.#####.#.#########.#.#.#.#####.#.###.###.#.###.#",
    "#.#...#.......#...#...#.#.....#.......#.#...#.......#.#.......#.#...#.....#...#...#...#...#.#.......#.....#.....#.#.#.#.....#.#.#...#.#.....#",
    "#.#.#.#############.#.#.#####.###.###.#.###.#.#####.###.###.###.#.###.#####.#.#######.###.#.#######.#.#####.###.#.#.#.#.#####.#.###.###.#.###",
    "#...#...............#.#.#...#...#.#...#...#.#.#...#.....#.#.#...#.....#.......#.....#.#...#...#.....#.....#...#.#.#.#.#...#...#...#.....#...#",
    "#.#####.#.#########.#.#.#.#.#.#.#.#.#####.#.#.#.#########.#.#.###.###########.#.###.#.#.#.###.#######.###.###.###.#.#.###.#.#####.#######.#.#",
    "#.#.....#.#.......#.#.#...#.#.....#.....#.#.#.#...............................#...#...#.#...#...........#...........#...#.........#.....#.#.#",
    "###.#.#####.#####.###.#####.#.#####.#.###.#.#.#.#####.#.#.#####.#.###########.###.#####.#############.#.#.#.#####.#.###.#####.#####.###.#.#.#",
    "#...#.....#...#...#...#.......................#.#...#.#.#.#...#.#...#...#.......#.#...#.#...........#...#.#.#.........#.....#.#...#...#.....#",
    "#.###.###.###.#.###.#####.###.#########.###.#.#.#.#.#.###.###.#.#.#.#.#.#########.#.#.#.#.###.#######.#####.#.###.#########.###.#.###.#####.#",
    "#S....................................#.......#...#.#.........#...#...#.....................................#...................#.....#.....#",
    "#############################################################################################################################################",
]

const test1 = [
    "###############",
    "#.......#....E#",
    "#.#.###.#.###.#",
    "#.....#.#...#.#",
    "#.###.#####.#.#",
    "#.#.#.......#.#",
    "#.#.#####.###.#",
    "#...........#.#",
    "###.#.#####.#.#",
    "#...#.....#.#.#",
    "#.#.#.###.#.#.#",
    "#.....#...#.#.#",
    "#.###.#.#.#.#.#",
    "#S..#.....#...#",
    "###############",
]

const test2 = [
    "#####",
    "#.#E#",
    "#S..#",
    "#####",
]

function main(mapData) {
    console.log("day 16 part 1...")
    const map = parseMap(mapData)
    printMap(map)
    findPath(map)
}

// main(test1)
// main(test2)
main(input)

/**
 * 1 Create a set of all unvisited nodes: the unvisited set.
 * 
 * 2 Assign to every node a distance from start value: for the starting node, it is zero, and for all other nodes, 
 * it is infinity, since initially no path is known to these nodes. During execution, the distance of a node N is the 
 * length of the shortest path discovered so far between the starting node and N.
 * 
 * 3 From the unvisited set, select the current node to be the one with the smallest (finite) distance; initially, this 
 * is the starting node (distance zero). If the unvisited set is empty, or contains only nodes with infinite distance 
 * (which are unreachable), then the algorithm terminates by skipping to step 6. If the only concern is the path to a 
 * target node, the algorithm terminates once the current node is the target node. Otherwise, the algorithm continues.
 * 
 * 4 For the current node, consider all of its unvisited neighbors and update their distances through the current node; 
 * compare the newly calculated distance to the one currently assigned to the neighbor and assign the smaller one to 
 * it. For example, if the current node A is marked with a distance of 6, and the edge connecting it with its 
 * neighbor B has length 2, then the distance to B through A is 6 + 2 = 8. If B was previously marked with a distance 
 * greater than 8, then update it to 8 (the path to B through A is shorter). Otherwise, keep its current distance 
 * (the path to B through A is not the shortest).
 * 
 * 5 After considering all of the current node's unvisited neighbors, the current node is removed from the unvisited 
 * set. Thus a visited node is never rechecked, which is correct because the distance recorded on the current node is 
 * minimal (as ensured in step 3), and thus final. Repeat from to step 3.
 * 
 * 6 Once the loop exits (steps 3–5), every visited node contains its shortest distance from the starting node.
 */
function findPath(map) {
    const nodesWithSmallestDistance = []
    // 1 + 2
    const unvisitedNodes = findAllUnvisitedNodes(map)
    // console.log(unvisitedNodes)

    while (unvisitedNodes.some(node => (node.distance !== Number.POSITIVE_INFINITY))) {

        // 3
        const nodeWithSmallestDistance = getNodeWithSmallestDistance(unvisitedNodes)
        // console.log("nodeWithSmallestDistance:")
        // console.log(nodeWithSmallestDistance)
        // 4
        getNeighbours(unvisitedNodes, nodeWithSmallestDistance)
        // console.log("neighbors:")
        // console.log(neighbors)
        // 5
        removeSmallestNode(unvisitedNodes, nodeWithSmallestDistance)
        // console.log("unvisitedNodes:")
        // console.log(unvisitedNodes)
        if (nodeWithSmallestDistance.value === "E") {
            nodesWithSmallestDistance.push(nodeWithSmallestDistance)
        }
    }

    // 6
    console.log("nodesWithSmallestDistance:")
    console.log(nodesWithSmallestDistance)

}

function removeSmallestNode(unvisitedNodes, nodeWithSmallestDistance) {
    const index = unvisitedNodes.findIndex(node => (node.x === nodeWithSmallestDistance.x && node.y === nodeWithSmallestDistance.y && node.direction === nodeWithSmallestDistance.direction))
    unvisitedNodes.splice(index, 1)
}

function getNeighbours(unvisitedNodes, startNode) {
    const neighbours = []
    const offsets = []

    if (startNode.direction === ">") { offsets.push({ offsetX: 1, offsetY: 0 }) }
    if (startNode.direction === "<") { offsets.push({ offsetX: -1, offsetY: 0 }) }
    if (startNode.direction === "^") { offsets.push({ offsetX: 0, offsetY: -1 }) }
    if (startNode.direction === "v") { offsets.push({ offsetX: 0, offsetY: 1 }) }

    offsets.forEach(offset => {
        const indexX = startNode.x + offset.offsetX
        const indexY = startNode.y + offset.offsetY
        const indexDirection = startNode.direction
        if (unvisitedNodes.some(node => (node.x === indexX && node.y === indexY && node.direction === indexDirection))) {
            const newNode = unvisitedNodes[unvisitedNodes.findIndex(node => (node.x === indexX && node.y === indexY && node.direction === indexDirection))]
            const newDistance = startNode.distance + 1
            if (newDistance < newNode.distance) { newNode.distance = newDistance }
            neighbours.push(newNode)
        }
    })

    const direction1 = (startNode.direction === "^" || startNode.direction === "v") ? "<" : "v"
    const direction2 = (startNode.direction === "^" || startNode.direction === "v") ? ">" : "^"

    if (unvisitedNodes.some(node => (node.x === startNode.x && node.y === startNode.y && node.direction === direction1))) {
        const newNode = unvisitedNodes[unvisitedNodes.findIndex(node => (node.x === startNode.x && node.y === startNode.y && node.direction === direction1))]
        const newDistance = startNode.distance + 1000
        if (newDistance < newNode.distance) { newNode.distance = newDistance }
        neighbours.push(newNode)
    }
    if (unvisitedNodes.some(node => (node.x === startNode.x && node.y === startNode.y && node.direction === direction2))) {
        const newNode = unvisitedNodes[unvisitedNodes.findIndex(node => (node.x === startNode.x && node.y === startNode.y && node.direction === direction2))]
        const newDistance = startNode.distance + 1000
        if (newDistance < newNode.distance) { newNode.distance = newDistance }
        neighbours.push(newNode)
    }

    return neighbours
}

function findEndPosition(map) {
    let currentX = null, currentY = null
    map.forEach((row, i) => {
        row.forEach((position, j) => {
            if (position === "E") {
                currentX = j
                currentY = i
            }
        })
    })
    return { x: currentX, y: currentY }
}

function findStartPosition(map) {
    let currentX = null, currentY = null
    map.forEach((row, i) => {
        row.forEach((position, j) => {
            if (position === "S") {
                currentX = j
                currentY = i
            }
        })
    })
    return { x: currentX, y: currentY }
}

function getNodeWithSmallestDistance(unvisitedNodes) {
    let smallestNode = unvisitedNodes[0]
    unvisitedNodes.forEach(node => {
        if (node.distance < smallestNode.distance) {
            smallestNode = node
        }
    })
    return smallestNode
}

function findAllUnvisitedNodes(map) {
    const nodes = []
    const rotations = [">", "v", "<", "^"]
    map.forEach((row, i) => {
        row.forEach((position, j) => {
            if (position !== "#") {
                rotations.forEach(rotation => {
                    nodes.push({
                        x: j,
                        y: i,
                        direction: rotation,
                        distance: Number.POSITIVE_INFINITY,
                        value: position
                    })
                })
            }
        })
    })
    const startingPosition = findStartPosition(map)
    nodes[nodes.findIndex(node => (node.x === startingPosition.x && node.y === startingPosition.y && node.direction === ">"))].distance = 0
    return nodes
}

function parseMap(mapData) {
    const map = []
    mapData.forEach(mapRow => {
        map.push(mapRow.split(""))
    })
    return map
}

function printMap(map) {
    map.forEach(row => {
        let string = ""
        row.forEach(value => {
            string += value
        })
        console.log(string)
    })
}